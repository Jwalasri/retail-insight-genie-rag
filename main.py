"""FastAPI application for the Retail Insight Genie RAG bot.

This module defines a small API with a single POST endpoint `/ask` that
takes a question as input and returns an answer generated by a simple
retrieval‑augmented generation pipeline. The pipeline uses a TF‑IDF
retrieval model to select the most relevant document from a set of
sample product descriptions and returns a formatted answer.
"""

from fastapi import FastAPI
from pydantic import BaseModel
import json
import os
from .rag import RAG, load_docs


class Query(BaseModel):
    """Data model for incoming queries."""

    query: str


def load_docs(path: str):
    """Deprecated function: this will be removed in future versions.

    Use :func:`app.rag.load_docs` instead.  This function simply
    forwards to ``app.rag.load_docs``.
    """
    return load_docs(path)


def create_app() -> FastAPI:
    """Create and configure the FastAPI application."""
    app = FastAPI(title="Retail Insight Genie", version="0.1.0")
    # Load sample product documents.  These documents live in
    # ``app/data/docs.json`` relative to this file.
    data_path = os.path.join(os.path.dirname(__file__), "data", "docs.json")
    docs = load_docs(data_path)
    rag = RAG(docs)

    @app.post("/ask")
    async def ask(query: Query):  # type: ignore
        """Answer a user question using the RAG pipeline.

        The returned value is a dictionary containing a single key
        ``answer`` with the composed response as its value.
        """
        # Compose an answer from the top retrieved document.
        answer_text = rag.answer(query.query)
        return {"answer": answer_text}

    return app


app = create_app()